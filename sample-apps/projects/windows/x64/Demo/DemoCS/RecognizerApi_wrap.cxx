/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_RecognizerApiWrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_RecognizerApiWrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_RecognizerApiWrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Includes the header in the wrapper code */
#include <RecognizerApi.h>


static MBRecognizerImage * *new_MBRecognizerImage() { 
  return new MBRecognizerImage *(); 
}

static MBRecognizerImage * *copy_MBRecognizerImage(MBRecognizerImage * value) { 
  return new MBRecognizerImage *(value); 
}

static void delete_MBRecognizerImage(MBRecognizerImage * *obj) { 
  if (obj) delete obj; 
}

static void MBRecognizerImage_assign(MBRecognizerImage * *obj, MBRecognizerImage * value) {
  *obj = value;
}

static MBRecognizerImage * MBRecognizerImage_value(MBRecognizerImage * *obj) {
  return *obj;
}


static MBCroatiaPdf417PaymentRecognizer * *new_MBCroatiaPdf417PaymentRecognizer() { 
  return new MBCroatiaPdf417PaymentRecognizer *(); 
}

static MBCroatiaPdf417PaymentRecognizer * *copy_MBCroatiaPdf417PaymentRecognizer(MBCroatiaPdf417PaymentRecognizer * value) { 
  return new MBCroatiaPdf417PaymentRecognizer *(value); 
}

static void delete_MBCroatiaPdf417PaymentRecognizer(MBCroatiaPdf417PaymentRecognizer * *obj) { 
  if (obj) delete obj; 
}

static void MBCroatiaPdf417PaymentRecognizer_assign(MBCroatiaPdf417PaymentRecognizer * *obj, MBCroatiaPdf417PaymentRecognizer * value) {
  *obj = value;
}

static MBCroatiaPdf417PaymentRecognizer * MBCroatiaPdf417PaymentRecognizer_value(MBCroatiaPdf417PaymentRecognizer * *obj) {
  return *obj;
}


static MBCroatiaQrPaymentRecognizer * *new_MBCroatiaQrPaymentRecognizer() { 
  return new MBCroatiaQrPaymentRecognizer *(); 
}

static MBCroatiaQrPaymentRecognizer * *copy_MBCroatiaQrPaymentRecognizer(MBCroatiaQrPaymentRecognizer * value) { 
  return new MBCroatiaQrPaymentRecognizer *(value); 
}

static void delete_MBCroatiaQrPaymentRecognizer(MBCroatiaQrPaymentRecognizer * *obj) { 
  if (obj) delete obj; 
}

static void MBCroatiaQrPaymentRecognizer_assign(MBCroatiaQrPaymentRecognizer * *obj, MBCroatiaQrPaymentRecognizer * value) {
  *obj = value;
}

static MBCroatiaQrPaymentRecognizer * MBCroatiaQrPaymentRecognizer_value(MBCroatiaQrPaymentRecognizer * *obj) {
  return *obj;
}


static MBRecognizerRunner * *new_MBRecognizerRunner() { 
  return new MBRecognizerRunner *(); 
}

static MBRecognizerRunner * *copy_MBRecognizerRunner(MBRecognizerRunner * value) { 
  return new MBRecognizerRunner *(value); 
}

static void delete_MBRecognizerRunner(MBRecognizerRunner * *obj) { 
  if (obj) delete obj; 
}

static void MBRecognizerRunner_assign(MBRecognizerRunner * *obj, MBRecognizerRunner * value) {
  *obj = value;
}

static MBRecognizerRunner * MBRecognizerRunner_value(MBRecognizerRunner * *obj) {
  return *obj;
}


static MBRecognizerPtr *new_MBRecognizerArray(int nelements) { 
  return new MBRecognizerPtr[nelements](); 
}

static void delete_MBRecognizerArray(MBRecognizerPtr *ary) { 
  delete [] ary; 
}

static MBRecognizerPtr MBRecognizerArray_getitem(MBRecognizerPtr *ary, int index) {
    return ary[index];
}
static void MBRecognizerArray_setitem(MBRecognizerPtr *ary, int index, MBRecognizerPtr value) {
    ary[index] = value;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPIUnlockWithLicenseKey(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (char *)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerAPIUnlockWithLicenseKey((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPIUnlockWithLicenseBuffer(void * jarg1, unsigned long jarg2) {
  int jresult ;
  MBByte *arg1 = (MBByte *) 0 ;
  size_t arg2 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBByte *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerAPIUnlockWithLicenseBuffer((unsigned char const *)arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPIUnlockForLicenseeWithLicenseKey(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerAPIUnlockForLicenseeWithLicenseKey((char const *)arg1,(char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPIUnlockForLicenseeWithLicenseBuffer(void * jarg1, unsigned long jarg2, char * jarg3) {
  int jresult ;
  MBByte *arg1 = (MBByte *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBByte *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (MBRecognizerErrorStatus)recognizerAPIUnlockForLicenseeWithLicenseBuffer((unsigned char const *)arg1,arg2,(char const *)arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaCommonBarcodePaymentRecognizerSettings_conversionRate_set(void * jarg1, float jarg2) {
  MBCroatiaCommonBarcodePaymentRecognizerSettings *arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *) 0 ;
  float arg2 ;
  
  arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->conversionRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Microblink_MBCroatiaCommonBarcodePaymentRecognizerSettings_conversionRate_get(void * jarg1) {
  float jresult ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *) 0 ;
  float result;
  
  arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)jarg1; 
  result = (float) ((arg1)->conversionRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaCommonBarcodePaymentRecognizerSettings() {
  void * jresult ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *result = 0 ;
  
  result = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)new MBCroatiaCommonBarcodePaymentRecognizerSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaCommonBarcodePaymentRecognizerSettings(void * jarg1) {
  MBCroatiaCommonBarcodePaymentRecognizerSettings *arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_croatiaPdf417PaymentRecognizerSettingsInit(void * jarg1) {
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  croatiaPdf417PaymentRecognizerSettingsInit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizerSettings_common_set(void * jarg1, void * jarg2) {
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *arg2 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  arg2 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)jarg2; 
  if (arg1) (arg1)->common = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizerSettings_common_get(void * jarg1) {
  void * jresult ;
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *result = 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  result = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)& ((arg1)->common);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizerSettings_uncertainDecoding_set(void * jarg1, unsigned char jarg2) {
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBBool arg2 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  arg2 = (MBBool)jarg2; 
  if (arg1) (arg1)->uncertainDecoding = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizerSettings_uncertainDecoding_get(void * jarg1) {
  unsigned char jresult ;
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBBool result;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  result = (MBBool) ((arg1)->uncertainDecoding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaPdf417PaymentRecognizerSettings() {
  void * jresult ;
  MBCroatiaPdf417PaymentRecognizerSettings *result = 0 ;
  
  result = (MBCroatiaPdf417PaymentRecognizerSettings *)new MBCroatiaPdf417PaymentRecognizerSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaPdf417PaymentRecognizerSettings(void * jarg1) {
  MBCroatiaPdf417PaymentRecognizerSettings *arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_croatiaQrPaymentRecognizerSettingsInit(void * jarg1) {
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  croatiaQrPaymentRecognizerSettingsInit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizerSettings_common_set(void * jarg1, void * jarg2) {
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *arg2 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  arg2 = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)jarg2; 
  if (arg1) (arg1)->common = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizerSettings_common_get(void * jarg1) {
  void * jresult ;
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBCroatiaCommonBarcodePaymentRecognizerSettings *result = 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  result = (MBCroatiaCommonBarcodePaymentRecognizerSettings *)& ((arg1)->common);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizerSettings_slowerThoroughScan_set(void * jarg1, unsigned char jarg2) {
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBBool arg2 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  arg2 = (MBBool)jarg2; 
  if (arg1) (arg1)->slowerThoroughScan = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizerSettings_slowerThoroughScan_get(void * jarg1) {
  unsigned char jresult ;
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBBool result;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  result = (MBBool) ((arg1)->slowerThoroughScan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaQrPaymentRecognizerSettings() {
  void * jresult ;
  MBCroatiaQrPaymentRecognizerSettings *result = 0 ;
  
  result = (MBCroatiaQrPaymentRecognizerSettings *)new MBCroatiaQrPaymentRecognizerSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaQrPaymentRecognizerSettings(void * jarg1) {
  MBCroatiaQrPaymentRecognizerSettings *arg1 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizerSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_baseResult_set(void * jarg1, void * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBaseRecognizerResult *arg2 = (MBBaseRecognizerResult *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (MBBaseRecognizerResult *)jarg2; 
  if (arg1) (arg1)->baseResult = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_baseResult_get(void * jarg1) {
  void * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBaseRecognizerResult *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (MBBaseRecognizerResult *)& ((arg1)->baseResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_amountHrk_set(void * jarg1, int jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  int arg2 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->amountHrk = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_amountHrk_get(void * jarg1) {
  int jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  int result;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (int) ((arg1)->amountHrk);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_amountEur_set(void * jarg1, int jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  int arg2 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->amountEur = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_amountEur_get(void * jarg1) {
  int jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  int result;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (int) ((arg1)->amountEur);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_conversionToEurPerformed_set(void * jarg1, unsigned char jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBool arg2 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (MBBool)jarg2; 
  if (arg1) (arg1)->conversionToEurPerformed = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_conversionToEurPerformed_get(void * jarg1) {
  unsigned char jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBool result;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (MBBool) ((arg1)->conversionToEurPerformed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerName_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->payerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->payerName, (const char *)arg2);
    } else {
      arg1->payerName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerName_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->payerName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerAddress_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->payerAddress = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->payerAddress, (const char *)arg2);
    } else {
      arg1->payerAddress = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerAddress_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->payerAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerDetailedAddress_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->payerDetailedAddress = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->payerDetailedAddress, (const char *)arg2);
    } else {
      arg1->payerDetailedAddress = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_payerDetailedAddress_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->payerDetailedAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientName_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->recipientName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->recipientName, (const char *)arg2);
    } else {
      arg1->recipientName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientName_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->recipientName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientAddress_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->recipientAddress = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->recipientAddress, (const char *)arg2);
    } else {
      arg1->recipientAddress = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientAddress_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->recipientAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientDetailedAddress_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->recipientDetailedAddress = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->recipientDetailedAddress, (const char *)arg2);
    } else {
      arg1->recipientDetailedAddress = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_recipientDetailedAddress_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->recipientDetailedAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_accountNumber_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->accountNumber = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->accountNumber, (const char *)arg2);
    } else {
      arg1->accountNumber = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_accountNumber_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->accountNumber);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_bankCode_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->bankCode = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->bankCode, (const char *)arg2);
    } else {
      arg1->bankCode = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_bankCode_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->bankCode);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_iban_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->iban = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->iban, (const char *)arg2);
    } else {
      arg1->iban = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_iban_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->iban);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_referenceModel_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->referenceModel = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->referenceModel, (const char *)arg2);
    } else {
      arg1->referenceModel = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_referenceModel_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->referenceModel);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_reference_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->reference = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->reference, (const char *)arg2);
    } else {
      arg1->reference = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_reference_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->reference);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_purposeCode_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->purposeCode = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->purposeCode, (const char *)arg2);
    } else {
      arg1->purposeCode = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_purposeCode_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->purposeCode);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_paymentDescription_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->paymentDescription = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->paymentDescription, (const char *)arg2);
    } else {
      arg1->paymentDescription = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_paymentDescription_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->paymentDescription);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_paymentDescriptionCode_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->paymentDescriptionCode = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->paymentDescriptionCode, (const char *)arg2);
    } else {
      arg1->paymentDescriptionCode = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_paymentDescriptionCode_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->paymentDescriptionCode);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_dueDate_set(void * jarg1, void * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBDate *arg2 = (MBDate *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (MBDate *)jarg2; 
  if (arg1) (arg1)->dueDate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_dueDate_get(void * jarg1) {
  void * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBDate *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (MBDate *)& ((arg1)->dueDate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_optionalData_set(void * jarg1, char * jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->optionalData = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->optionalData, (const char *)arg2);
    } else {
      arg1->optionalData = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_optionalData_get(void * jarg1) {
  char * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (char *) ((arg1)->optionalData);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_slipId_set(void * jarg1, int jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBCroatiaBarcodePaymentSlipIdType arg2 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (MBCroatiaBarcodePaymentSlipIdType)jarg2; 
  if (arg1) (arg1)->slipId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_slipId_get(void * jarg1) {
  int jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBCroatiaBarcodePaymentSlipIdType result;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (MBCroatiaBarcodePaymentSlipIdType) ((arg1)->slipId);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_uncertain_set(void * jarg1, unsigned char jarg2) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBool arg2 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  arg2 = (MBBool)jarg2; 
  if (arg1) (arg1)->uncertain = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Microblink_MBCroatiaBarcodePaymentRecognizerResult_uncertain_get(void * jarg1) {
  unsigned char jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  MBBool result;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  result = (MBBool) ((arg1)->uncertain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaBarcodePaymentRecognizerResult() {
  void * jresult ;
  MBCroatiaBarcodePaymentRecognizerResult *result = 0 ;
  
  result = (MBCroatiaBarcodePaymentRecognizerResult *)new MBCroatiaBarcodePaymentRecognizerResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaBarcodePaymentRecognizerResult(void * jarg1) {
  MBCroatiaBarcodePaymentRecognizerResult *arg1 = (MBCroatiaBarcodePaymentRecognizerResult *) 0 ;
  
  arg1 = (MBCroatiaBarcodePaymentRecognizerResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaPdf417PaymentRecognizerCreate(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaPdf417PaymentRecognizer **arg1 = (MBCroatiaPdf417PaymentRecognizer **) 0 ;
  MBCroatiaPdf417PaymentRecognizerSettings *arg2 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer **)jarg1; 
  arg2 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaPdf417PaymentRecognizerCreate(arg1,(MBCroatiaPdf417PaymentRecognizerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaPdf417PaymentRecognizerUpdate(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaPdf417PaymentRecognizer *arg1 = (MBCroatiaPdf417PaymentRecognizer *) 0 ;
  MBCroatiaPdf417PaymentRecognizerSettings *arg2 = (MBCroatiaPdf417PaymentRecognizerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer *)jarg1; 
  arg2 = (MBCroatiaPdf417PaymentRecognizerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaPdf417PaymentRecognizerUpdate(arg1,(MBCroatiaPdf417PaymentRecognizerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaPdf417PaymentRecognizerResult(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaPdf417PaymentRecognizerResult *arg1 = (MBCroatiaPdf417PaymentRecognizerResult *) 0 ;
  MBCroatiaPdf417PaymentRecognizer *arg2 = (MBCroatiaPdf417PaymentRecognizer *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizerResult *)jarg1; 
  arg2 = (MBCroatiaPdf417PaymentRecognizer *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaPdf417PaymentRecognizerResult(arg1,(MBCroatiaPdf417PaymentRecognizer const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaPdf417PaymentRecognizerDelete(void * jarg1) {
  int jresult ;
  MBCroatiaPdf417PaymentRecognizer **arg1 = (MBCroatiaPdf417PaymentRecognizer **) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer **)jarg1; 
  result = (MBRecognizerErrorStatus)croatiaPdf417PaymentRecognizerDelete(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaQrPaymentRecognizerCreate(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaQrPaymentRecognizer **arg1 = (MBCroatiaQrPaymentRecognizer **) 0 ;
  MBCroatiaQrPaymentRecognizerSettings *arg2 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaQrPaymentRecognizer **)jarg1; 
  arg2 = (MBCroatiaQrPaymentRecognizerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaQrPaymentRecognizerCreate(arg1,(MBCroatiaQrPaymentRecognizerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaQrPaymentRecognizerUpdate(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaQrPaymentRecognizer *arg1 = (MBCroatiaQrPaymentRecognizer *) 0 ;
  MBCroatiaQrPaymentRecognizerSettings *arg2 = (MBCroatiaQrPaymentRecognizerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaQrPaymentRecognizer *)jarg1; 
  arg2 = (MBCroatiaQrPaymentRecognizerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaQrPaymentRecognizerUpdate(arg1,(MBCroatiaQrPaymentRecognizerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaQrPaymentRecognizerResult(void * jarg1, void * jarg2) {
  int jresult ;
  MBCroatiaQrPaymentRecognizerResult *arg1 = (MBCroatiaQrPaymentRecognizerResult *) 0 ;
  MBCroatiaQrPaymentRecognizer *arg2 = (MBCroatiaQrPaymentRecognizer *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaQrPaymentRecognizerResult *)jarg1; 
  arg2 = (MBCroatiaQrPaymentRecognizer *)jarg2; 
  result = (MBRecognizerErrorStatus)croatiaQrPaymentRecognizerResult(arg1,(MBCroatiaQrPaymentRecognizer const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_croatiaQrPaymentRecognizerDelete(void * jarg1) {
  int jresult ;
  MBCroatiaQrPaymentRecognizer **arg1 = (MBCroatiaQrPaymentRecognizer **) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBCroatiaQrPaymentRecognizer **)jarg1; 
  result = (MBRecognizerErrorStatus)croatiaQrPaymentRecognizerDelete(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBBaseRecognizerResult_state_set(void * jarg1, int jarg2) {
  MBBaseRecognizerResult *arg1 = (MBBaseRecognizerResult *) 0 ;
  MBRecognizerResultState arg2 ;
  
  arg1 = (MBBaseRecognizerResult *)jarg1; 
  arg2 = (MBRecognizerResultState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBBaseRecognizerResult_state_get(void * jarg1) {
  int jresult ;
  MBBaseRecognizerResult *arg1 = (MBBaseRecognizerResult *) 0 ;
  MBRecognizerResultState result;
  
  arg1 = (MBBaseRecognizerResult *)jarg1; 
  result = (MBRecognizerResultState) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBBaseRecognizerResult() {
  void * jresult ;
  MBBaseRecognizerResult *result = 0 ;
  
  result = (MBBaseRecognizerResult *)new MBBaseRecognizerResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBBaseRecognizerResult(void * jarg1) {
  MBBaseRecognizerResult *arg1 = (MBBaseRecognizerResult *) 0 ;
  
  arg1 = (MBBaseRecognizerResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_recognizerAPIGetVersionString() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)recognizerAPIGetVersionString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPISetResourcesLocation(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (char *)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerAPISetResourcesLocation((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerAPISetCacheLocation(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (char *)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerAPISetCacheLocation((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_recognizerErrorToString(int jarg1) {
  char * jresult ;
  MBRecognizerErrorStatus arg1 ;
  char *result = 0 ;
  
  arg1 = (MBRecognizerErrorStatus)jarg1; 
  result = (char *)recognizerErrorToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageCreateFromRawImage(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5, int jarg6) {
  int jresult ;
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  MBByte *arg2 = (MBByte *) 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  MBRawImageType arg6 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  arg2 = (MBByte *)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint16_t)jarg5; 
  arg6 = (MBRawImageType)jarg6; 
  result = (MBRecognizerErrorStatus)recognizerImageCreateFromRawImage(arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageLoadFromFile(void * jarg1, char * jarg2) {
  int jresult ;
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  char *arg2 = (char *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  arg2 = (char *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerImageLoadFromFile(arg1,(char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageSetNewRawBuffer(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5, int jarg6) {
  int jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBByte *arg2 = (MBByte *) 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  MBRawImageType arg6 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  arg2 = (MBByte *)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint16_t)jarg5; 
  arg6 = (MBRawImageType)jarg6; 
  result = (MBRecognizerErrorStatus)recognizerImageSetNewRawBuffer(arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageCreateCopyFromImage(void * jarg1, void * jarg2) {
  int jresult ;
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  MBRecognizerImage *arg2 = (MBRecognizerImage *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  arg2 = (MBRecognizerImage *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerImageCreateCopyFromImage(arg1,(MBRecognizerImage const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageDelete(void * jarg1) {
  int jresult ;
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerImageDelete(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageSetImageOrientation(void * jarg1, int jarg2) {
  int jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBImageOrientation arg2 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  arg2 = (MBImageOrientation)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerImageSetImageOrientation(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageGetImageOrientation(void * jarg1) {
  int jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBImageOrientation result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (MBImageOrientation)recognizerImageGetImageOrientation((MBRecognizerImage const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_recognizerImageGetRawBytes(void * jarg1) {
  void * jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBByte *result = 0 ;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (MBByte *)recognizerImageGetRawBytes((MBRecognizerImage const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_recognizerImageGetMutableRawBytes(void * jarg1) {
  void * jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBByte *result = 0 ;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (MBByte *)recognizerImageGetMutableRawBytes(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Microblink_recognizerImageGetWidth(void * jarg1) {
  unsigned short jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  uint16_t result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (uint16_t)recognizerImageGetWidth((MBRecognizerImage const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Microblink_recognizerImageGetHeight(void * jarg1) {
  unsigned short jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  uint16_t result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (uint16_t)recognizerImageGetHeight((MBRecognizerImage const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Microblink_recognizerImageGetBytesPerRow(void * jarg1) {
  unsigned short jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  uint16_t result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (uint16_t)recognizerImageGetBytesPerRow((MBRecognizerImage const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerImageGetRawImageType(void * jarg1) {
  int jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBRawImageType result;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (MBRawImageType)recognizerImageGetRawImageType((MBRecognizerImage const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_recognizerRunnerSettingsDefaultInit(void * jarg1) {
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  recognizerRunnerSettingsDefaultInit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_allowMultipleResults_set(void * jarg1, unsigned char jarg2) {
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  MBBool arg2 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  arg2 = (MBBool)jarg2; 
  if (arg1) (arg1)->allowMultipleResults = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_allowMultipleResults_get(void * jarg1) {
  unsigned char jresult ;
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  MBBool result;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  result = (MBBool) ((arg1)->allowMultipleResults);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_recognizers_set(void * jarg1, void * jarg2) {
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  MBRecognizerPtr *arg2 = (MBRecognizerPtr *) 0 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  arg2 = (MBRecognizerPtr *)jarg2; 
  if (arg1) (arg1)->recognizers = (MBRecognizerPtr const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_recognizers_get(void * jarg1) {
  void * jresult ;
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  MBRecognizerPtr *result = 0 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  result = (MBRecognizerPtr *) ((arg1)->recognizers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_numOfRecognizers_set(void * jarg1, unsigned long jarg2) {
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  size_t arg2 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->numOfRecognizers = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Microblink_MBRecognizerRunnerSettings_numOfRecognizers_get(void * jarg1) {
  unsigned long jresult ;
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  size_t result;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  result = (size_t) ((arg1)->numOfRecognizers);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRecognizerRunnerSettings() {
  void * jresult ;
  MBRecognizerRunnerSettings *result = 0 ;
  
  result = (MBRecognizerRunnerSettings *)new MBRecognizerRunnerSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRecognizerRunnerSettings(void * jarg1) {
  MBRecognizerRunnerSettings *arg1 = (MBRecognizerRunnerSettings *) 0 ;
  
  arg1 = (MBRecognizerRunnerSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBPoint_x_set(void * jarg1, int jarg2) {
  MBPoint *arg1 = (MBPoint *) 0 ;
  int arg2 ;
  
  arg1 = (MBPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBPoint_x_get(void * jarg1) {
  int jresult ;
  MBPoint *arg1 = (MBPoint *) 0 ;
  int result;
  
  arg1 = (MBPoint *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBPoint_y_set(void * jarg1, int jarg2) {
  MBPoint *arg1 = (MBPoint *) 0 ;
  int arg2 ;
  
  arg1 = (MBPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBPoint_y_get(void * jarg1) {
  int jresult ;
  MBPoint *arg1 = (MBPoint *) 0 ;
  int result;
  
  arg1 = (MBPoint *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBPoint() {
  void * jresult ;
  MBPoint *result = 0 ;
  
  result = (MBPoint *)new MBPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBPoint(void * jarg1) {
  MBPoint *arg1 = (MBPoint *) 0 ;
  
  arg1 = (MBPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBSize_width_set(void * jarg1, int jarg2) {
  MBSize *arg1 = (MBSize *) 0 ;
  int arg2 ;
  
  arg1 = (MBSize *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBSize_width_get(void * jarg1) {
  int jresult ;
  MBSize *arg1 = (MBSize *) 0 ;
  int result;
  
  arg1 = (MBSize *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBSize_height_set(void * jarg1, int jarg2) {
  MBSize *arg1 = (MBSize *) 0 ;
  int arg2 ;
  
  arg1 = (MBSize *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBSize_height_get(void * jarg1) {
  int jresult ;
  MBSize *arg1 = (MBSize *) 0 ;
  int result;
  
  arg1 = (MBSize *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBSize() {
  void * jresult ;
  MBSize *result = 0 ;
  
  result = (MBSize *)new MBSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBSize(void * jarg1) {
  MBSize *arg1 = (MBSize *) 0 ;
  
  arg1 = (MBSize *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_recognitionCallbackDefaultInit(void * jarg1) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  recognitionCallbackDefaultInit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionStarted_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->onDetectionStarted = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionStarted_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)()) ((arg1)->onDetectionStarted);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionMidway_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)(MBPoint const *,size_t) = (void (*)(MBPoint const *,size_t)) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)(MBPoint const *,size_t))jarg2; 
  if (arg1) (arg1)->onDetectionMidway = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionMidway_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)(MBPoint const *,size_t) = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)(MBPoint const *,size_t)) ((arg1)->onDetectionMidway);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectedObject_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  MBBool (*arg2)(MBPoint const *,size_t,MBDetectionStatus) = (MBBool (*)(MBPoint const *,size_t,MBDetectionStatus)) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (MBBool (*)(MBPoint const *,size_t,MBDetectionStatus))jarg2; 
  if (arg1) (arg1)->onDetectedObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectedObject_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  MBBool (*result)(MBPoint const *,size_t,MBDetectionStatus) = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (MBBool (*)(MBPoint const *,size_t,MBDetectionStatus)) ((arg1)->onDetectedObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionFailed_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->onDetectionFailed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onDetectionFailed_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)()) ((arg1)->onDetectionFailed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onRecognitionStarted_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->onRecognitionStarted = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onRecognitionStarted_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)()) ((arg1)->onRecognitionStarted);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onRecognitionFinished_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->onRecognitionFinished = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onRecognitionFinished_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)()) ((arg1)->onRecognitionFinished);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onShowImage_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)(MBRecognizerImage const *,MBShowImageType,char const *) = (void (*)(MBRecognizerImage const *,MBShowImageType,char const *)) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)(MBRecognizerImage const *,MBShowImageType,char const *))jarg2; 
  if (arg1) (arg1)->onShowImage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onShowImage_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)(MBRecognizerImage const *,MBShowImageType,char const *) = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)(MBRecognizerImage const *,MBShowImageType,char const *)) ((arg1)->onShowImage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onFirstSideResult_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->onFirstSideResult = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onFirstSideResult_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)()) ((arg1)->onFirstSideResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onGlare_set(void * jarg1, void * jarg2) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*arg2)(MBBool) = (void (*)(MBBool)) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  arg2 = (void (*)(MBBool))jarg2; 
  if (arg1) (arg1)->onGlare = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognitionCallback_onGlare_get(void * jarg1) {
  void * jresult ;
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  void (*result)(MBBool) = 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  result = (void (*)(MBBool)) ((arg1)->onGlare);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRecognitionCallback() {
  void * jresult ;
  MBRecognitionCallback *result = 0 ;
  
  result = (MBRecognitionCallback *)new MBRecognitionCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRecognitionCallback(void * jarg1) {
  MBRecognitionCallback *arg1 = (MBRecognitionCallback *) 0 ;
  
  arg1 = (MBRecognitionCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerCreate(void * jarg1, void * jarg2) {
  int jresult ;
  MBRecognizerRunner **arg1 = (MBRecognizerRunner **) 0 ;
  MBRecognizerRunnerSettings *arg2 = (MBRecognizerRunnerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner **)jarg1; 
  arg2 = (MBRecognizerRunnerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerRunnerCreate(arg1,(MBRecognizerRunnerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerUpdateSettings(void * jarg1, void * jarg2) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRecognizerRunnerSettings *arg2 = (MBRecognizerRunnerSettings *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  arg2 = (MBRecognizerRunnerSettings *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerRunnerUpdateSettings(arg1,(MBRecognizerRunnerSettings const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerDelete(void * jarg1) {
  int jresult ;
  MBRecognizerRunner **arg1 = (MBRecognizerRunner **) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner **)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerRunnerDelete(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerSetROI(void * jarg1, void * jarg2) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRectangle *arg2 = (MBRectangle *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  arg2 = (MBRectangle *)jarg2; 
  result = (MBRecognizerErrorStatus)recognizerRunnerSetROI(arg1,(MBRectangle const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerRecognizeFromImage(void * jarg1, void * jarg2, unsigned char jarg3, void * jarg4) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRecognizerImage *arg2 = (MBRecognizerImage *) 0 ;
  MBBool arg3 ;
  MBRecognitionCallback *arg4 = (MBRecognitionCallback *) 0 ;
  MBRecognizerResultState result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  arg2 = (MBRecognizerImage *)jarg2; 
  arg3 = (MBBool)jarg3; 
  arg4 = (MBRecognitionCallback *)jarg4; 
  result = (MBRecognizerResultState)recognizerRunnerRecognizeFromImage(arg1,(MBRecognizerImage const *)arg2,arg3,(MBRecognitionCallback const *)arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerRecognizeFromString(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  char *arg2 = (char *) 0 ;
  MBRecognitionCallback *arg3 = (MBRecognitionCallback *) 0 ;
  MBRecognizerResultState result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MBRecognitionCallback *)jarg3; 
  result = (MBRecognizerResultState)recognizerRunnerRecognizeFromString(arg1,(char const *)arg2,(MBRecognitionCallback const *)arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerCancelCurrentRecognition(void * jarg1) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerRunnerCancelCurrentRecognition(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_recognizerRunnerReset(void * jarg1) {
  int jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRecognizerErrorStatus result;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  result = (MBRecognizerErrorStatus)recognizerRunnerReset(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRectangle_x_set(void * jarg1, float jarg2) {
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float arg2 ;
  
  arg1 = (MBRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Microblink_MBRectangle_x_get(void * jarg1) {
  float jresult ;
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float result;
  
  arg1 = (MBRectangle *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRectangle_y_set(void * jarg1, float jarg2) {
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float arg2 ;
  
  arg1 = (MBRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Microblink_MBRectangle_y_get(void * jarg1) {
  float jresult ;
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float result;
  
  arg1 = (MBRectangle *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRectangle_width_set(void * jarg1, float jarg2) {
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float arg2 ;
  
  arg1 = (MBRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Microblink_MBRectangle_width_get(void * jarg1) {
  float jresult ;
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float result;
  
  arg1 = (MBRectangle *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRectangle_height_set(void * jarg1, float jarg2) {
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float arg2 ;
  
  arg1 = (MBRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Microblink_MBRectangle_height_get(void * jarg1) {
  float jresult ;
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  float result;
  
  arg1 = (MBRectangle *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRectangle() {
  void * jresult ;
  MBRectangle *result = 0 ;
  
  result = (MBRectangle *)new MBRectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRectangle(void * jarg1) {
  MBRectangle *arg1 = (MBRectangle *) 0 ;
  
  arg1 = (MBRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MB_FALSE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MB_TRUE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_day_set(void * jarg1, int jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  int arg2 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBDate_day_get(void * jarg1) {
  int jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  int result;
  
  arg1 = (MBDate *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_month_set(void * jarg1, int jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  int arg2 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBDate_month_get(void * jarg1) {
  int jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  int result;
  
  arg1 = (MBDate *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_year_set(void * jarg1, int jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  int arg2 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBDate_year_get(void * jarg1) {
  int jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  int result;
  
  arg1 = (MBDate *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_successfullyParsed_set(void * jarg1, int jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  int arg2 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->successfullyParsed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBDate_successfullyParsed_get(void * jarg1) {
  int jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  int result;
  
  arg1 = (MBDate *)jarg1; 
  result = (int) ((arg1)->successfullyParsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_originalString_set(void * jarg1, char * jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->originalString = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->originalString, (const char *)arg2);
    } else {
      arg1->originalString = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Microblink_MBDate_originalString_get(void * jarg1) {
  char * jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  char *result = 0 ;
  
  arg1 = (MBDate *)jarg1; 
  result = (char *) ((arg1)->originalString);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBDate_empty_set(void * jarg1, int jarg2) {
  MBDate *arg1 = (MBDate *) 0 ;
  int arg2 ;
  
  arg1 = (MBDate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->empty = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblink_MBDate_empty_get(void * jarg1) {
  int jresult ;
  MBDate *arg1 = (MBDate *) 0 ;
  int result;
  
  arg1 = (MBDate *)jarg1; 
  result = (int) ((arg1)->empty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBDate() {
  void * jresult ;
  MBDate *result = 0 ;
  
  result = (MBDate *)new MBDate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBDate(void * jarg1) {
  MBDate *arg1 = (MBDate *) 0 ;
  
  arg1 = (MBDate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRecognizerImage() {
  void * jresult ;
  MBRecognizerImage **result = 0 ;
  
  result = (MBRecognizerImage **)new_MBRecognizerImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_copy_MBRecognizerImage(void * jarg1) {
  void * jresult ;
  MBRecognizerImage *arg1 = (MBRecognizerImage *) 0 ;
  MBRecognizerImage **result = 0 ;
  
  arg1 = (MBRecognizerImage *)jarg1; 
  result = (MBRecognizerImage **)copy_MBRecognizerImage(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRecognizerImage(void * jarg1) {
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  delete_MBRecognizerImage(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerImage_assign(void * jarg1, void * jarg2) {
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  MBRecognizerImage *arg2 = (MBRecognizerImage *) 0 ;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  arg2 = (MBRecognizerImage *)jarg2; 
  MBRecognizerImage_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognizerImage_value(void * jarg1) {
  void * jresult ;
  MBRecognizerImage **arg1 = (MBRecognizerImage **) 0 ;
  MBRecognizerImage *result = 0 ;
  
  arg1 = (MBRecognizerImage **)jarg1; 
  result = (MBRecognizerImage *)MBRecognizerImage_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaPdf417PaymentRecognizer() {
  void * jresult ;
  MBCroatiaPdf417PaymentRecognizer **result = 0 ;
  
  result = (MBCroatiaPdf417PaymentRecognizer **)new_MBCroatiaPdf417PaymentRecognizer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_copy_MBCroatiaPdf417PaymentRecognizer(void * jarg1) {
  void * jresult ;
  MBCroatiaPdf417PaymentRecognizer *arg1 = (MBCroatiaPdf417PaymentRecognizer *) 0 ;
  MBCroatiaPdf417PaymentRecognizer **result = 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer *)jarg1; 
  result = (MBCroatiaPdf417PaymentRecognizer **)copy_MBCroatiaPdf417PaymentRecognizer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaPdf417PaymentRecognizer(void * jarg1) {
  MBCroatiaPdf417PaymentRecognizer **arg1 = (MBCroatiaPdf417PaymentRecognizer **) 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer **)jarg1; 
  delete_MBCroatiaPdf417PaymentRecognizer(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizer_assign(void * jarg1, void * jarg2) {
  MBCroatiaPdf417PaymentRecognizer **arg1 = (MBCroatiaPdf417PaymentRecognizer **) 0 ;
  MBCroatiaPdf417PaymentRecognizer *arg2 = (MBCroatiaPdf417PaymentRecognizer *) 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer **)jarg1; 
  arg2 = (MBCroatiaPdf417PaymentRecognizer *)jarg2; 
  MBCroatiaPdf417PaymentRecognizer_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaPdf417PaymentRecognizer_value(void * jarg1) {
  void * jresult ;
  MBCroatiaPdf417PaymentRecognizer **arg1 = (MBCroatiaPdf417PaymentRecognizer **) 0 ;
  MBCroatiaPdf417PaymentRecognizer *result = 0 ;
  
  arg1 = (MBCroatiaPdf417PaymentRecognizer **)jarg1; 
  result = (MBCroatiaPdf417PaymentRecognizer *)MBCroatiaPdf417PaymentRecognizer_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBCroatiaQrPaymentRecognizer() {
  void * jresult ;
  MBCroatiaQrPaymentRecognizer **result = 0 ;
  
  result = (MBCroatiaQrPaymentRecognizer **)new_MBCroatiaQrPaymentRecognizer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_copy_MBCroatiaQrPaymentRecognizer(void * jarg1) {
  void * jresult ;
  MBCroatiaQrPaymentRecognizer *arg1 = (MBCroatiaQrPaymentRecognizer *) 0 ;
  MBCroatiaQrPaymentRecognizer **result = 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizer *)jarg1; 
  result = (MBCroatiaQrPaymentRecognizer **)copy_MBCroatiaQrPaymentRecognizer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBCroatiaQrPaymentRecognizer(void * jarg1) {
  MBCroatiaQrPaymentRecognizer **arg1 = (MBCroatiaQrPaymentRecognizer **) 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizer **)jarg1; 
  delete_MBCroatiaQrPaymentRecognizer(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizer_assign(void * jarg1, void * jarg2) {
  MBCroatiaQrPaymentRecognizer **arg1 = (MBCroatiaQrPaymentRecognizer **) 0 ;
  MBCroatiaQrPaymentRecognizer *arg2 = (MBCroatiaQrPaymentRecognizer *) 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizer **)jarg1; 
  arg2 = (MBCroatiaQrPaymentRecognizer *)jarg2; 
  MBCroatiaQrPaymentRecognizer_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBCroatiaQrPaymentRecognizer_value(void * jarg1) {
  void * jresult ;
  MBCroatiaQrPaymentRecognizer **arg1 = (MBCroatiaQrPaymentRecognizer **) 0 ;
  MBCroatiaQrPaymentRecognizer *result = 0 ;
  
  arg1 = (MBCroatiaQrPaymentRecognizer **)jarg1; 
  result = (MBCroatiaQrPaymentRecognizer *)MBCroatiaQrPaymentRecognizer_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRecognizerRunner() {
  void * jresult ;
  MBRecognizerRunner **result = 0 ;
  
  result = (MBRecognizerRunner **)new_MBRecognizerRunner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_copy_MBRecognizerRunner(void * jarg1) {
  void * jresult ;
  MBRecognizerRunner *arg1 = (MBRecognizerRunner *) 0 ;
  MBRecognizerRunner **result = 0 ;
  
  arg1 = (MBRecognizerRunner *)jarg1; 
  result = (MBRecognizerRunner **)copy_MBRecognizerRunner(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRecognizerRunner(void * jarg1) {
  MBRecognizerRunner **arg1 = (MBRecognizerRunner **) 0 ;
  
  arg1 = (MBRecognizerRunner **)jarg1; 
  delete_MBRecognizerRunner(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerRunner_assign(void * jarg1, void * jarg2) {
  MBRecognizerRunner **arg1 = (MBRecognizerRunner **) 0 ;
  MBRecognizerRunner *arg2 = (MBRecognizerRunner *) 0 ;
  
  arg1 = (MBRecognizerRunner **)jarg1; 
  arg2 = (MBRecognizerRunner *)jarg2; 
  MBRecognizerRunner_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognizerRunner_value(void * jarg1) {
  void * jresult ;
  MBRecognizerRunner **arg1 = (MBRecognizerRunner **) 0 ;
  MBRecognizerRunner *result = 0 ;
  
  arg1 = (MBRecognizerRunner **)jarg1; 
  result = (MBRecognizerRunner *)MBRecognizerRunner_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_new_MBRecognizerArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  MBRecognizerPtr *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (MBRecognizerPtr *)new_MBRecognizerArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_delete_MBRecognizerArray(void * jarg1) {
  MBRecognizerPtr *arg1 = (MBRecognizerPtr *) 0 ;
  
  arg1 = (MBRecognizerPtr *)jarg1; 
  delete_MBRecognizerArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblink_MBRecognizerArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  MBRecognizerPtr *arg1 = (MBRecognizerPtr *) 0 ;
  int arg2 ;
  MBRecognizerPtr result;
  
  arg1 = (MBRecognizerPtr *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MBRecognizerPtr)MBRecognizerArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblink_MBRecognizerArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  MBRecognizerPtr *arg1 = (MBRecognizerPtr *) 0 ;
  int arg2 ;
  MBRecognizerPtr arg3 = (MBRecognizerPtr) 0 ;
  
  arg1 = (MBRecognizerPtr *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  MBRecognizerArray_setitem(arg1,arg2,arg3);
}


#ifdef __cplusplus
}
#endif

